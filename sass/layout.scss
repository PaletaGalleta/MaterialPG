* {
    box-sizing: border-box;
}

html {
    height: 100%;
}

body {
    padding: 0;
    margin: 0;
    min-height: 100%;
    // display: flex;
    // flex-direction: row;
    // align-items: stretch;

    &.noscroll {
        overflow: hidden;
    }
}

.content {
    flex: 1;
}

/***************************************************************************
 * Wording Classes generator
 **************************************************************************/
@mixin gen-classes-word($prefix, $property, $values) {
    @each $value in $values {
        // Generate the "normal" class
        .#{$prefix}-#{$value} {
            #{$property}: $value !important;
        }
    }
    @each $brKey, $brValue in v.$grid-breakpoints {
        @media (min-width: $brValue) {
            @each $value in $values {
                // Generate the responsive classes
                .#{$prefix}-#{$brKey}-#{$value} {
                    #{$property}: $value !important;
                }
            }
        }
    }
}

/***************************************************************************
 * Class generator by Number
 **************************************************************************/
@mixin gen-classes-num($prefix, $property, $important) {
    @each $key, $value in v.$pixel-diff {
        // Generate the "normal" class
        .#{$prefix}-#{$key} {
            @each $prop in $property {
                @if $important == 0 {
                    #{$prop}: $value;
                }
                @if $important == 1 {
                    #{$prop}: $value !important;
                }
            }
        }
    }
    @each $brKey, $brValue in v.$grid-breakpoints {
        @media (min-width: $brValue) {
            @each $key, $value in v.$pixel-diff {
                // Generate the responsive classes
                .#{$prefix}-#{$brKey}-#{$key} {
                    @each $prop in $property {
                        @if $important == 0 {
                            #{$prop}: $value;
                        }
                        @if $important == 1 {
                            #{$prop}: $value !important;
                        }
                    }
                }
            }
        }
    }
}

/***************************************************************************
 * Containers
 **************************************************************************/
@mixin gen-container-classes() {
    @each $key, $value in v.$grid-breakpoints {
        .container-#{$key} {
            width: 100%;
            max-width: 100%;
            margin-right: auto;
            margin-left: auto;
            @each $bKey, $bValue in v.$grid-breakpoints {
                @if $bValue > $value {
                    @media (min-width: $bValue) {
                        max-width: map-get(v.$container-sizes, $bKey);
                    }
                }
            }
        }
    }

    .container-fluid {
        width: 100%;
    }
}

// Generate classes for display types
@include gen-container-classes();

/***************************************************************************
 * Position Classes
 **************************************************************************/
@include gen-classes-word("pos", "position", v.$pos-types);

/***************************************************************************
 * Display Classes
 **************************************************************************/
@include gen-classes-word("d", "display", v.$display-types);

.flexh {
    display: flex;
    flex-direction: row !important;
    align-items: center;
}
.flexv {
    display: flex;
    flex-direction: column;
}

.flex-align-items-center {
    align-items: center !important;
}

.flex-gr-1 {
    flex: 1;
}

.pe-none {
    pointer-events: none !important;
}

/***************************************************************************
 * Rows
 **************************************************************************/
.row {
    margin: 0;
    width: 100%;
    display: flex;
    flex-wrap: wrap;
    row-gap: 8px;
}

.row::after {
    content: "";
    clear: both;
    display: table;
}

/***************************************************************************
 * Columns
 **************************************************************************/

%colSettings {
    float: left;
    min-height: 1px;
    display: flex;
    flex-direction: column;
    padding: 6px;
    max-width: 100%;
}

@mixin gen-columns($prefix, $column-counts) {
    // Generate the "normal" ones
    .#{$prefix} {
        flex: 1;
        @extend %colSettings;
    }
    .#{$prefix}-auto {
        max-width: fit-content;
        @extend %colSettings;
    }
    @for $i from 1 through v.$column-count {
        .#{$prefix}-#{$i} {
            flex-basis: percentage(calc(1 / calc(v.$column-count / $i)));
            max-width: percentage(calc(1 / calc(v.$column-count / $i)));
            @extend %colSettings;
        }
    }
    // Generate the responsive ones
    @each $key, $value in $column-counts {
        @media (min-width: map-get(v.$grid-breakpoints, $key)) {
            .#{$prefix}-#{$key} {
                flex: 1;
            }
            .#{$prefix}-#{$key}-auto {
                max-width: fit-content;
            }
            @for $i from 1 through $value {
                .#{$prefix}-#{$key}-#{$i} {
                    flex-basis: percentage(calc(1 / calc($value / $i)));
                    max-width: percentage(calc(1 / calc($value / $i)));
                }
            }
        }
    }
}

// Generate classes for columns
@include gen-columns("col", v.$column-counts);

/***************************************************************************
 * Column Gap Classes
 **************************************************************************/
@include gen-classes-num("column-gap", "column-gap", 0);

/***************************************************************************
 * Column Gap Classes
 **************************************************************************/
@include gen-classes-num("row-gap", "row-gap", 0);

/***************************************************************************
* All Gap Classes
**************************************************************************/
@include gen-classes-num("gap", ("column-gap", "row-gap"), 0);

/***************************************************************************
* Padding Classes
**************************************************************************/
@include gen-classes-num("p", "padding", 1);
@include gen-classes-num("pt", "padding-top", 1);
@include gen-classes-num("pb", "padding-bottom", 1);
@include gen-classes-num("pe", "padding-right", 1);
@include gen-classes-num("ps", "padding-left", 1);
@include gen-classes-num("py", ("padding-top", "padding-bottom"), 1);
@include gen-classes-num("px", ("padding-right", "padding-left"), 1);

/***************************************************************************
* Margin Classes
**************************************************************************/
@include gen-classes-num("m", "margin", 1);
@include gen-classes-num("mt", "margin-top", 1);
@include gen-classes-num("mb", "margin-bottom", 1);
@include gen-classes-num("me", "margin-right", 1);
@include gen-classes-num("ms", "margin-left", 1);
@include gen-classes-num("my", ("margin-top", "margin-bottom"), 1);
@include gen-classes-num("mx", ("margin-right", "margin-left"), 1);

/***************************************************************************
* Border Radius Classes
**************************************************************************/
@include gen-classes-num("br", "border-radius", 1);
// @include gen-classes-word("corner", "border-radius", v.$corners);

/***************************************************************************
 * Percentage Layouts
 **************************************************************************/

@mixin gen-percentage($prefix, $property) {
    // Generate the "normal" class
    @each $perc, $val in v.$percentage-types {
        .#{$prefix}-#{$perc} {
            #{$property}: #{$val};
        }
    }
    @each $brKey, $brValue in v.$grid-breakpoints {
        @media (min-width: $brValue) {
            // Generate the responsive classes
            @each $perc, $val in v.$percentage-types {
                .#{$prefix}-#{$brKey}-#{$perc} {
                    #{$property}: #{$val};
                }
            }
        }
    }
}

@include gen-percentage("w", "width");
@include gen-percentage("h", "height");

/***************************************************************************
  * Position Classes
  **************************************************************************/
@each $posplace in v.$pos-places {
    @include gen-percentage($posplace, $posplace);
}

/***************************************************************************
 * Custom layouts
 **************************************************************************/
@mixin gen-properties($prefix, $posfix, $propMap) {
    // Generate the "normal" class
    .#{$prefix}-#{$posfix} {
        @each $prop, $value in $propMap {
            #{$prop}: $value;
        }
    }
    @each $brKey, $brValue in v.$grid-breakpoints {
        @media (min-width: $brValue) {
            // Generate the responsive classes
            .#{$prefix}-#{$brKey}-#{$posfix} {
                @each $prop, $value in $propMap {
                    #{$prop}: $value !important;
                }
            }
        }
    }
}

@include gen-properties(
    "m",
    "auto",
    (
        margin: auto,
    )
);
@include gen-properties(
    "m",
    "initial",
    (
        margin: initial,
    )
);

$sticky-top-map: (
    position: sticky,
    top: 0,
    z-index: 1020,
);
@include gen-properties("sticky", "top", $sticky-top-map);

$sticky-bottom-map: (
    position: sticky,
    bottom: 0,
    z-index: 1020,
);
@include gen-properties("sticky", "bottom", $sticky-bottom-map);

$fixed-top-map: (
    position: fixed,
    right: 0,
    top: 0,
    left: 0,
    z-index: 1030,
);
@include gen-properties("fixed", "top", $fixed-top-map);

$fixed-bottom-map: (
    position: fixed,
    right: 0,
    bottom: 0,
    left: 0,
    z-index: 1030,
);
@include gen-properties("fixed", "bottom", $fixed-bottom-map);

$flexV: (
    display: flex,
    flex-direction: column,
);
@include gen-properties("flex", "v", $flexV);

$flexH: (
    display: flex,
    flex-direction: row,
);
@include gen-properties("flex", "h", $flexH);

$flexVRev: (
    display: flex,
    flex-direction: column-reverse,
);
@include gen-properties("flex", "v-rev", $flexVRev);

$flexHRev: (
    display: flex,
    flex-direction: row-reverse,
);
@include gen-properties("flex", "h-rev", $flexHRev);

@include gen-properties(
    "flex",
    "wrap",
    (
        flex-wrap: wrap,
    )
);
@include gen-properties(
    "flex",
    "nowrap",
    (
        flex-wrap: nowrap,
    )
);

@include gen-properties(
    "flex-justify",
    "start",
    (
        justify-content: flex-start,
    )
);

@include gen-properties(
    "flex-justify",
    "center",
    (
        justify-content: center,
    )
);

@include gen-properties(
    "flex-justify",
    "end",
    (
        justify-content: flex-end,
    )
);

@include gen-properties(
    "flex-align",
    "start",
    (
        align-items: flex-start,
    )
);

@include gen-properties(
    "flex-align",
    "center",
    (
        align-items: center,
    )
);

@include gen-properties(
    "flex-align",
    "end",
    (
        align-items: flex-end,
    )
);

//* Flex Orders

@mixin order-utilities {
    @for $i from 1 through 5 {
        .order-#{$i} {
            order: $i;
        }
    }

    @each $brKey, $brValue in v.$grid-breakpoints {
        @for $i from 1 through 5 {
            .order-#{$brKey}-#{$i} {
                @media (min-width: $brValue) {
                    order: $i;
                }
            }
        }
    }
}

// Example usage:
@include order-utilities;

@include gen-properties(
    "order",
    "first",
    (
        order: -1,
    )
);

@include gen-properties(
    "order",
    "last",
    (
        order: 6,
    )
);

.overlay {
    position: absolute;
}

.border {
    border: 1px solid var(--md-sys-color-outline);
}

.img-fluid {
    overflow: hidden;
    object-fit: cover;
}

.img-ratio {
    position: relative;
    width: 100%; // Set the width as needed
    padding-top: attr(data-mdpg-aspectratio percentage);
    overflow: hidden;

    & img {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover; // Adjust this property as needed (cover, contain, etc.)
    }
}

.wrap {
    white-space: pre-wrap !important;
    text-overflow: ellipsis !important;
}

/* Panel Based
 - Any amount of panels
*/
.panel-container {
    position: relative;
    width: 100%;
    overflow-x: hidden;

    & .panel {
        position: absolute;
        width: inherit;
        height: fit-content;
        padding: 4px;
        transition: transform v.$durationXLong4 v.$easingEmphasized, opacity v.$durationLong4 v.$easingEmphasized;

        opacity: 0;

        &.before {
            transform: translateX(-100%);
        }

        &.after {
            transform: translateX(100%);
        }

        &.show {
            opacity: 1;
            transform: translateX(0);
        }
    }
}
.panelcontainer {
    height: 100%;
    display: flex;
    flex-direction: row;
    padding-bottom: 58px;
    margin-top: 64px;

    & .panel {
        height: 100%;
        overflow-y: auto;
        overflow-x: hidden;
        padding: 8px;
        transition: transform var(--md-sys-motion-duration-long3) var(--md-sys-motion-easing-emphasized-decelerate),
            opacity var(--md-sys-motion-duration-medium3) var(--md-sys-motion-easing-emphasized-decelerate);
    }
}

/* Pantallas Pequeñas (md) */
@media only screen and (max-width: 1000px) {
    .panelcontainer .panel {
        opacity: 1;
        /* z-index: ; */
    }

    .panelcontainer .panel[hidden] {
        opacity: 0;
        pointer-events: none;
        /* display: none; */
        /* transform: translateX(0); */
    }

    .panelcontainer .panel#panel1[hidden] {
        /* display: none; */
        transform: translateX(-30%);
    }

    .panelcontainer .panel#panel2[hidden] {
        /* display: none; */
        transform: translateX(-70%);
    }

    .panelcontainer .panel#panel2:not([hidden]) {
        /* display: none; */
        transform: translateX(-100%);
    }
}

/* Teléfonos móviles (sm) */
@media only screen and (max-width: 700px) {
    .twopanel {
        margin-left: 0;
    }
    .panelcontainer {
        padding-bottom: 144px;
    }
}

form {
    margin: 0;
}

.stretched-link::after {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 2;
    content: "";
}

.center {
    margin: 0 auto;
    text-align: center;
}

.centerverthor {
    margin: 0;
    position: absolute;
    top: 50%;
    left: 50%;
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
}

.g-recaptcha {
    width: 100%;
    display: flex;
    justify-content: center;
    padding: 8px 0 16px;
}

.anim-spin:hover {
    transform: rotate(10deg);
}
.anim-scale:hover {
    transform: scale(0.9);
}

.spinner {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    border: 12.8px solid var(--md-sys-color-secondary);
    animation: spinner-bulqg1 0.8s infinite linear alternate, spinner-oaa3wk 1.6s infinite linear;
}

.minispinner {
    padding: 5px;
    width: 24px;
    height: 24px;
    border-radius: 50%;
    border: 4px solid var(--md-sys-color-on-secondary);
    animation: spinner-bulqg1 0.8s infinite linear alternate, spinner-oaa3wk 1.6s infinite linear;
}

@keyframes spinner-bulqg1 {
    0% {
        clip-path: polygon(50% 50%, 0 0, 50% 0%, 50% 0%, 50% 0%, 50% 0%, 50% 0%);
    }

    12.5% {
        clip-path: polygon(50% 50%, 0 0, 50% 0%, 100% 0%, 100% 0%, 100% 0%, 100% 0%);
    }

    25% {
        clip-path: polygon(50% 50%, 0 0, 50% 0%, 100% 0%, 100% 100%, 100% 100%, 100% 100%);
    }

    50% {
        clip-path: polygon(50% 50%, 0 0, 50% 0%, 100% 0%, 100% 100%, 50% 100%, 0% 100%);
    }

    62.5% {
        clip-path: polygon(50% 50%, 100% 0, 100% 0%, 100% 0%, 100% 100%, 50% 100%, 0% 100%);
    }

    75% {
        clip-path: polygon(50% 50%, 100% 100%, 100% 100%, 100% 100%, 100% 100%, 50% 100%, 0% 100%);
    }

    100% {
        clip-path: polygon(50% 50%, 50% 100%, 50% 100%, 50% 100%, 50% 100%, 50% 100%, 0% 100%);
    }
}

@keyframes spinner-oaa3wk {
    0% {
        transform: scaleY(1) rotate(0deg);
    }

    49.99% {
        transform: scaleY(1) rotate(135deg);
    }

    50% {
        transform: scaleY(-1) rotate(0deg);
    }

    100% {
        transform: scaleY(-1) rotate(-135deg);
    }
}

#map-canvas {
    height: 500px;
}

/* 000Webhost */
a[href="https://www.000webhost.com/?utm_source=000webhostapp&amp;utm_campaign=000_logo&amp;utm_medium=website&amp;utm_content=footer_img"],
img[src="https://cdn.000webhost.com/000webhost/logo/footer-powered-by-000webhost-white2.png"]
{
    display: none !important;
}
